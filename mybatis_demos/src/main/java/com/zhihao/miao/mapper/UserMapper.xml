<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
     注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->
<mapper namespace="com.zhihao.miao.mapper.UserMapper">

   <!-- 定义resultMap
	将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系
	type：resultMap最终映射的java对象类型,可以使用别名
	id：对resultMap的唯一标识
	 -->
	 <resultMap type="user" id="userResultMap">
	 	<!-- id表示查询结果集中唯一标识 
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	-->
	 	<id column="id_" property="id"/>
	 	<!-- 
	 	result：对普通名映射定义
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	 -->
	 	<result column="username_" property="username"/>
	 
	 </resultMap>
  <!-- 在 映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过 select执行数据库查询
	id：标识 映射文件中的 sql
	将sql语句封装到mappedStatement对象中，所以将id称为statement的id
	parameterType：指定输入 参数的类型，这里指定int型 
	#{}表示一个占位符号
	#{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
	
	resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM USER WHERE id=#{value}
	</select>
	
	<!-- 用户信息综合查询
	#{userCustom.sex}:取出pojo包装对象中性别值
	${userCustom.username}：取出pojo包装对象中用户名称
	-->
	<select id="findUserList" parameterType="userQueryVo" resultType="userCustom">
	    SELECT * FROM USER where sex = #{userCustom.sex} and username like '%${userCustom.username}%'
	</select>
	
	<!-- 用户信息综合查询总数
	parameterType：指定输入类型和findUserList一样
	resultType：输出结果类型
	-->
	 <select id="findUserCount" parameterType="userQueryVo" resultType="int">
	   SELECT count(1) FROM USER where sex = #{userCustom.sex} and username like '%${userCustom.username}%'
	 </select>
	 
	 <!-- 使用resultMap进行输出映射
	resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace
	-->
	<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id id_,username username_ FROM USER WHERE id=#{value}
	</select>
	
	
	<!-- 使用动态sql进行开发 -->
	<select id="findUserListDynamic" parameterType="userQueryVo" resultType="userCustom">
	    SELECT * FROM USER 
	    <!-- where 可以自动去掉条件中的第一个and -->
	    <where>
	    <if test="userCustom !=null">
	       <if test="userCustom.sex!=null and userCustom.sex !=''">
	          and sex = #{userCustom.sex}
	       </if>
	       <if test="userCustom.username!=null and userCustom.username !=''">
	          and username like '%${userCustom.username}%'
	       </if>
	    </if>
	    </where>
	</select>
	
	<!-- 使用sql片段进行开发 -->
	<sql id="query_user_where">
	   <if test="userCustom !=null">
	       <if test="userCustom.sex!=null and userCustom.sex !=''">
	          and sex = #{userCustom.sex}
	       </if>
	       <if test="userCustom.username!=null and userCustom.username !=''">
	          and username like '%${userCustom.username}%'
	       </if>
	    </if>
	</sql>
	<select id="findUserListSqlClip" parameterType="userQueryVo" resultType="userCustom">
	    SELECT * FROM USER 
	    <!-- where 可以自动去掉条件中的第一个and -->
	    <where>
	        <!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里还要引用其它的sql片段  -->
	    </where>
	</select>
	
	
	<!-- 使用foreach -->
	<select id="findUserListForeach" parameterType="userQueryVo" resultType="userCustom">
	    SELECT * FROM USER 
	    <where>
	       <if test="ids != null">
	           <!-- 使用 foreach遍历传入ids
				collection：指定输入对象中集合属性
				item：每个遍历生成对象中
				open：开始遍历时拼接的串
				close：结束遍历时拼接的串
				separator：遍历的两个对象中需要拼接的串
			  -->
			 <!-- 使用实现下边的sql拼接：
			  AND (id=1 OR id=10 OR id=16)  -->
			   <!--  
	          <foreach collection="ids" item="user_id" open="and (" close=")" separator="or">
	             id = #{user_id}
	          </foreach>
	          -->
	          <!-- 还有一种in的方式  SELECT * FROM USER WHERE id in(10,26) -->
	         <foreach collection="ids" item="user_id" open="and id in(" close=")" separator=",">
	             #{user_id}
	          </foreach>
	          
	          
	       </if>
	    </where>
	</select>
</mapper>